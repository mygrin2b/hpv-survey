const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const QRCode = require('qrcode');
const basicAuth = require('express-basic-auth');
const app = express();
const port = 3000;

// Middleware
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.urlencoded({ extended: true }));

// Basic auth configuration
const auth = basicAuth({
  users: { 'admin': 'survey2025' }, // Username: admin, Password: survey2025
  challenge: true,
  unauthorizedResponse: 'Unauthorized: Please enter the correct username and password'
});

// Get current date (Hong Kong time, UTC+8) in YYYY-MM-DD format
function getDateString() {
  const date = new Date();
  const offset = 8 * 60 * 60 * 1000; // UTC+8
  const localDate = new Date(date.getTime() + offset);
  return localDate.toISOString().split('T')[0]; // e.g., "2025-08-16"
}

// Generate QR code at server startup
const surveyUrl = 'http://localhost:3000/info-sheet'; // Updated to link to info-sheet
const qrCodePath = path.join(__dirname, 'public', 'images', 'qr-code.png');

// Ensure images directory exists
const imagesDir = path.join(__dirname, 'public', 'images');
if (!fs.existsSync(imagesDir)) {
  fs.mkdirSync(imagesDir, { recursive: true });
}

// Generate and save QR code
QRCode.toFile(qrCodePath, surveyUrl, {
  color: {
    dark: '#000000',
    light: '#FFFFFF'
  }
}, (err) => {
  if (err) {
    console.error('Failed to generate QR code:', err);
  } else {
    console.log(`QR code generated and saved to ${qrCodePath}`);
  }
});

// Routes
// Homepage (redirects to info-sheet)
app.get('/', (req, res) => {
  res.redirect('/info-sheet');
});

// Download links page
app.get('/downloads', (req, res) => {
  const logFiles = fs.readdirSync(__dirname)
    .filter(file => file.startsWith('log-') && file.endsWith('.txt'))
    .map(file => file.replace('log-', '').replace('.txt', ''));
  res.render('index', { logFiles });
});

// Information Sheet page
app.get('/info-sheet', (req, res) => {
  res.render('info-sheet');
});

// 放在 /survey 路由之前即可
app.get('/info-sheet', (req, res) => res.render('info-sheet'));

app.get('/goodbye', (req, res) => res.render('goodbye'));

// Survey page
app.get('/survey', (req, res) => {
  res.render('survey');
});

// Download CSV file (requires auth)
app.get('/download/:date', auth, (req, res) => {
  try {
    const date = req.params.date;
    const logFile = `log-${date}.txt`;
    const logFilePath = path.join(__dirname, logFile);

    if (!fs.existsSync(logFilePath)) {
      return res.status(404).send('Log file not found for the specified date');
    }

    const responses = fs.readFileSync(logFilePath, 'utf8')
      .split('\n')
      .filter(line => line.trim() !== '')
      .map(line => JSON.parse(line));

    if (responses.length === 0) {
      return res.status(404).send('Log file for the specified date is empty');
    }

    const headers = ['timestamp', 'phoneNumber', 'assignedId', ...Object.keys(responses[0]).filter(key => key !== 'timestamp' && key !== 'phoneNumber' && key !== 'assignedId')];
    const csvRows = [headers.join(',')];

    responses.forEach(response => {
      const row = headers.map(header => `"${response[header] || ''}"`).join(',');
      csvRows.push(row);
    });

    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename=responses-${date}.csv`);
    res.send(csvRows.join('\n'));
  } catch (err) {
    console.error('Failed to generate CSV file:', err);
    res.status(500).send('Error generating CSV file');
  }
});

// Handle survey submission
app.post('/survey', (req, res) => {
  try {
    const { phoneNumber, assignedId } = req.body;
    if (!/^[2356789][0-9]{7}$/.test(phoneNumber)) {
      return res.status(400).send('Invalid phone number format');
    }
    if (!/^[0-9]{8}$/.test(assignedId)) {
      return res.status(400).send('ID must be an 8-digit number');
    }

    const response = {
      timestamp: new Date().toISOString(),
      phoneNumber,
      assignedId,
      ...req.body
    };

    const dateString = getDateString();
    const logFileName = `log-${dateString}.txt`;
    const logFilePath = path.join(__dirname, logFileName);
    const responseString = JSON.stringify(response) + '\n';

    fs.appendFileSync(logFilePath, responseString, 'utf8');
    console.log(`Survey response saved to ${logFileName}:`, response);
    res.redirect('/thank-you');
  } catch (err) {
    console.error('Failed to save survey response:', err);
    res.status(500).send('Error submitting survey');
  }
});

// Thank-you page
app.get('/thank-you', (req, res) => {
  res.render('thank-you');
});

// Start server
app.listen(port, () => {
  console.log(`Server running at ${surveyUrl}`);
});